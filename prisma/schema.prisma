generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id            String    @id @default(cuid())
  name          String?
  email         String?   @unique
  emailVerified DateTime?
  image         String?
  password      String?
  referralCode  String    @unique
  reputation    Int       @default(100)
  gamesPlayed   Int       @default(0)
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt

  accounts      Account[]
  sessions      Session[]
  hostedGames   Game[]    @relation("GameHost")
  games         Game[]    @relation("GamePlayers")
  gamePlayers   GamePlayer[]
  reviews       Review[]  @relation("UserReviews")
  invitedBy     User?     @relation("Referrals", fields: [invitedById], references: [id])
  invitedById   String?
  invitedUsers  User[]    @relation("Referrals")
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model Game {
  id          String      @id @default(cuid())
  title       String
  gameType    String
  buyIn       Float
  maxPlayers  Int
  location    String
  description String?
  startTime   DateTime
  status      String      @default("SCHEDULED")
  createdAt   DateTime    @default(now())
  updatedAt   DateTime    @updatedAt
  
  host        User        @relation("GameHost", fields: [hostId], references: [id])
  hostId      String
  players     User[]      @relation("GamePlayers")
  gamePlayers GamePlayer[]
  reviews     Review[]    @relation("GameReviews")
}

enum GameStatus {
  SCHEDULED
  IN_PROGRESS
  COMPLETED
  CANCELLED
}

model GamePlayer {
  id        String   @id @default(cuid())
  game      Game     @relation(fields: [gameId], references: [id])
  gameId    String
  player    User     @relation(fields: [playerId], references: [id])
  playerId  String
  status    String   @default("PENDING")
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@unique([gameId, playerId])
}

model Review {
  id         String   @id @default(cuid())
  gameId     String
  reviewerId String
  rating     Int
  comment    String?
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt

  // Relations
  game      Game     @relation("GameReviews", fields: [gameId], references: [id])
  reviewer  User     @relation("UserReviews", fields: [reviewerId], references: [id])
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}
generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id            String    @id @default(cuid())
  email         String    @unique
  name          String?
  password      String?
  image         String?
  referralCode  String    @unique @default(cuid())
  invitedBy     User?     @relation("UserInvites", fields: [invitedById], references: [id])
  invitedById   String?
  invitedUsers  User[]    @relation("UserInvites")
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt
  hostedGames   Game[]    @relation("GameHost")
  joinedGames   Game[]    @relation("GamePlayers")
  reputation    Int       @default(100)
  gamesPlayed   Int       @default(0)
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model Game {
  id          String    @id @default(cuid())
  title       String
  gameType    String    // e.g., "Texas Hold'em", "Omaha"
  buyIn       Float
  maxPlayers  Int
  location    String
  startTime   DateTime
  endTime     DateTime?
  status      GameStatus @default(SCHEDULED)
  host        User      @relation("GameHost", fields: [hostId], references: [id])
  hostId      String
  players     User[]    @relation("GamePlayers")
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
}

enum GameStatus {
  SCHEDULED
  IN_PROGRESS
  COMPLETED
  CANCELLED
}

model GamePlayer {
  id        String   @id @default(cuid())
  gameId    String
  playerId  String
  status    String   @default("PENDING") // PENDING, CONFIRMED, REJECTED
  tokenPaid Boolean  @default(false)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relations
  game      Game     @relation(fields: [gameId], references: [id])
  player    User     @relation(fields: [playerId], references: [id])
}

model Review {
  id        String   @id @default(cuid())
  gameId    String
  reviewerId String
  rating    Int
  comment   String?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relations
  game      Game     @relation(fields: [gameId], references: [id])
  reviewer  User     @relation(fields: [reviewerId], references: [id])
} 